#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import win kivy.core.window
#:import Factory kivy.factory.Factory
#:import Clock kivy.clock.Clock
#:import ObjectProperty kivy.properties.ObjectProperty
#:import Effects mahartstudios.effects.Effects

#:import os os
#:import partial functools.partial


# override the default property for file chooser
# a realy bad idea but i had to do it anyway
<Label>:
	color: 0,0,0,1

#:set atlas_path 'atlas://images/'


<PdfScreens>:
	Screen:
		name: 'home'
		on_leave:
			if root.current!='file' or root.current!='template chooser' or root.current!='saved page': root.project_name='new'

		BoxLayout:
			orientation: 'vertical'
			canvas:
				Color:
					rgba: .9,.9,.9,1
				Rectangle:
					size: self.size
					pos: self.pos

			BoxLayout:
				id: action_bar1
				size_hint_y: None
				height: '50dp'
				canvas.before:
					Color:
						rgba: 1,1,1,1
					Rectangle:
						size: self.size
						pos: self.pos
				IconButton:
					shape: 'rectangle'
					normal_color: 1,1,1,1
					icon_source: atlas_path+'arrow_back'
					size_hint_x: None
					width: '50dp'
					on_release: Factory.TemplateAlert(comfirm=partial(root.go_page,'home_page')).open();  #root.current = 'home'

				Label:
					color: get_color_from_hex('#FF9900')
					text_size: self.size
                    padding: '40dp', '40dp'
				    halign: 'left'
				    valign: 'center'
					font_size: '20dp'
                    markup: True
					text: 'Pdf Maker'
					bold: True

				IconButton:
                    icon_source: atlas_path+'overflow'
					size_hint_x: None
					width: '34dp'
					drop_down:  Factory.DropOptions()
					save_project: Factory.SaveProject()
					on_release:
						if root.project_name=='new': self.drop_down.save_project=self.save_project.open; self.drop_down.open(self); self.drop_down.load_project=root; self.save_project.activate=root.save_project; self.drop_down.export_pdf = Factory.SaveModal(activate=root.export_pdf)
						else: self.drop_down.save_project=partial(root.save_project, root.project_name); self.drop_down.open(self); self.drop_down.load_project=root; self.drop_down.export_pdf = Factory.SaveModal(activate=root.export_pdf)
			FloatLayout:
				id: float_lay
				ScrollView:
					effect_cls: 'DampedScrollEffect'
					PdfLayout:
						padding: '4dp'
						spacing: '4dp'
						id: pics_grid
						cols: 3
						size_hint_y: None
						height: self.minimum_height
						col_force_default: True
						col_default_width: (win.Window.width/3) -5

		BoxLayout:
			size_hint_y: None
			height: '50dp'
			canvas.before:
				Color:
					rgba: 1,1,1,1
				Rectangle:
					size: self.size
					pos: self.pos
				Color:
					rgba: .8,.8,8,1
				Line:
					points: [self.x, self.y+self.height, self.x+self.width, self.y+self.height]
					width: 1.2


			IconButton:
				icon_source: atlas_path+'rotate'
				background_color: 0,0,0,0
				on_release: root.rotate_manager()

			IconButton:
				icon_source: atlas_path+'crop1'
				background_color: 0,0,0,0
				on_release: root.crop_manager()

			BoxLayout:
				IconButton:
					id: edit_btn
					pos_hint: {'center_y': .85}
					icon_source: atlas_path+'edit'
					normal_color: 0,0,0,0
					on_release: root.edit_manager()

			IconButton:
				icon_source: atlas_path+'enlarge'
				background_color: 0,0,0,0
				on_release: root.image_viewer_manager()

			IconButton:
				icon_source: atlas_path+'delete'
				background_color: 0,0,0,0
				on_release: root.delete_pic()


	Screen:
		name: 'file'
		FloatLayout:
			BoxLayout:
				orientation: 'vertical'
				BoxLayout:
					size_hint_y: None
					height: '50dp'
					canvas.before:
						Color:
							rgba: 1,1,1,1
						Rectangle:
							size: self.size
							pos: self.pos

					IconButton:
						shape: 'rectangle'
						normal_color: 1,1,1,1
						icon_source: atlas_path+'arrow_back'
						size_hint_x: None
						width: '50dp'
						on_release: root.current = 'home'

					Label:
						rgba: get_color_from_hex('#FF9966')
						text: 'Select Images'
						text_size: self.size
						padding: '40dp', '40dp'
						halign: 'left'
						valign: 'center'
						font_size: '22dp'
						markup: True

					Label:
						id: count
						text: '0'
						size_hint_x: None
						width: '100dp'
						rgba: get_color_from_hex('#FF9966')

				FileChooserThumbView:
					id: chooser
					filters: [root.my_filter]
					filter_dirs: True
					multiselect: True
					on_selection: count.text = str(len(self.selection))
					progress_cls: 'MyFileProgressCls'
					canvas.before:
						Color:
							rgba: .95,.95,.95,1
						Rectangle:
							size: self.size
							pos: self.pos

        CircleBtn:
            background_color: 0, 0, 0, 0
            size_hint: (None, None)
            size: ('40dp', '40dp')
            pos_hint: {'x': .8,  'y': .05}
            source: 'float.png'
            color: (1, 1, 1, 1)
			on_release: root.add_more(chooser.selection)

	Screen:
		name: 'template chooser'
		BoxLayout:
			orientation: 'vertical'
			canvas:
				Color:
					rgba: 1,1,1,1
				Rectangle:
					size: self.size
					pos: self.pos

			BoxLayout:
				size_hint_y: None
				height: '70dp'
				IconButton:
					size_hint_x: None
					width: '64dp'
					background_color: 1,1,1,1
					icon_source: atlas_path+'arrow_back'
					on_release: root.current = 'home'
				Label:
					text: 'Choose a Template'
					color: get_color_from_hex('#FF9900')
					font_size: '20dp'
					bold: True
					text_size: self.size
					valign: 'middle'
					halign: 'left'
					padding: '20dp', 0

			Carousel:
				TemplateButton:
					text: 'Title page'
					source: atlas_path+'template1'
					on_release: root.current = 'templates'; templates_page.current = 'template1'; templates.current_working_data=''
				TemplateButton:
					text: 'Multiline page with title'
					source: atlas_path+'template2'
					on_release: root.current = 'templates'; templates_page.current = 'template2'; templates.current_working_data=''
				TemplateButton:
					text: 'Multiline Page'
					source: atlas_path+'template3'
					on_release: root.current = 'templates'; templates_page.current = 'template3'; templates.current_working_data=''
				TemplateButton:
					text: 'Double multiline page with title'
					source: atlas_path+'template5'
					on_release: root.current = 'templates'; templates_page.current = 'template4'; templates.current_working_data=''
				TemplateButton:
					text: 'Double multiline page'
					source: atlas_path+'template4'
					on_release: root.current = 'templates'; templates_page.current = 'template5'; templates.current_working_data=''
	Screen:
		id: templates
		name: 'templates'
		current: 'template2'
		current_working_data: ''

		ScreenManager:
			id: templates_page
			Screen:
				name: 'template1'
				on_enter: root.set_template_data(doc_lay1, current_working_data)
				canvas.before:
					Color:
						rgba: 1,1,1,1
					Rectangle:
						size: self.size
						pos: self.pos
				BoxLayout:
					orientation: 'vertical'
					ActionBar1:
						on_front_action: root.template_manager(doc_lay1)
						on_back_action:
							if templates.current_working_data=='': self.alert_pop.comfirm=partial(root.go_page, 'home')
							else : self.alert_pop.comfirm=partial(root.go_page, 'template chooser');
							self.alert_pop.open()
					BoxLayout:
						padding: '10dp'
						DocLayout:
							template_func: 'template3'
							template_type: 'template1'
							id: doc_lay1
							orientation: 'vertical'
							padding: '20dp'
							spacing: '10dp'
							TextInput:
							TextInput:

			Screen:
				name: 'template2'
				canvas.before:
					Color:
						rgba: 1,1,1,1
					Rectangle:
						size: self.size
						pos: self.pos
				BoxLayout:
					orientation: 'vertical'
					ActionBar1:
						text: 'Page Editor'
						on_front_action: root.template_manager(doc_lay2)
						on_back_action:
							if templates.current_working_data=='': self.alert_pop.comfirm=partial(root.go_page, 'home')
							else : self.alert_pop.comfirm=partial(root.go_page, 'template chooser');
							self.alert_pop.open()
					BoxLayout:
						padding: '10dp'
						DocLayout:
							template_func: 'template1'
							template_type: 'template2'
							id: doc_lay2
							orientation: 'vertical'
							padding: '20dp'
							spacing: '10dp'
							TextInput:
								multiline: False
								size_hint_y: None
								height: '60dp'
								cursor_color: get_color_from_hex('#ff9900')
								font_size: '18dp'
								padding: '40dp', '20dp'
							TextInput:
								auto_indent: True
								cursor_color: get_color_from_hex('#ff9900')
								font_size: '13dp'
								padding: '20dp', '20dp', '20dp', '20dp'

			Screen:
				name: 'template3'
				canvas.before:
					Color:
						rgba: 1,1,1,1
					Rectangle:
						size: self.size
						pos: self.pos
				BoxLayout:
					orientation: 'vertical'
					ActionBar1:
						text: 'Page Editor'
						on_front_action: root.template_manager(doc_lay3)
						on_back_action:
							if templates.current_working_data=='': self.alert_pop.comfirm=partial(root.go_page, 'home')
							else : self.alert_pop.comfirm=partial(root.go_page, 'template chooser');
							self.alert_pop.open()
					BoxLayout:
						padding: '10dp'
						DocLayout:
							id: doc_lay3
							template_func: 'template1'
							template_type: 'template3'
							orientation: 'vertical'
							padding: '20dp'
							spacing: '10dp'
							TextInput:
								auto_indent: True
								cursor_color: get_color_from_hex('#ff9900')
								font_size: '13dp'
								padding: '20dp', '20dp', '20dp', '20dp'

			Screen:
				name: 'template4'
				canvas.before:
					Color:
						rgba: 1,1,1,1
					Rectangle:
						size: self.size
						pos: self.pos

				BoxLayout
					orientation: 'vertical'
					ActionBar1:
						text: 'Page Editor'
						on_front_action: root.template_manager(doc_lay4)
						on_back_action:
							if templates.current_working_data=='': self.alert_pop.comfirm=partial(root.go_page, 'home')
							else : self.alert_pop.comfirm=partial(root.go_page, 'template chooser');
							self.alert_pop.open()
					BoxLayout:
						padding: '10dp'
						DocLayout:
							id: doc_lay4
							template_func: 'template2'
							template_type: 'template4'
							orientation: 'vertical'
							padding: '20dp'
							spacing: '10dp'
							TextInput:
								multiline: False
								size_hint_y: None
								height: '60dp'
								cursor_color: get_color_from_hex('#ff9900')
								font_size: '18dp'
								padding: '40dp', '20dp'
								#halign: 'center'
							BoxLayout:
								spacing: '6dp'
								TextInput:
									auto_indent: True
									cursor_color: get_color_from_hex('#ff9900')
									font_size: '13dp'
									padding: '20dp', '20dp', '20dp', '20dp'
								TextInput:
									auto_indent: True
									cursor_color: get_color_from_hex('#ff9900')
									font_size: '13dp'
									padding: '20dp', '20dp', '20dp', '20dp'


			Screen:
				name: 'template5'
				canvas.before:
					Color:
						rgba: 1,1,1,1
					Rectangle:
						size: self.size
						pos: self.pos
				BoxLayout:
					orientation: 'vertical'
					ActionBar1:
						text: 'Page Editor'
						on_front_action: root.template_manager(doc_lay5)
						on_back_action:
							if templates.current_working_data=='': self.alert_pop.comfirm=partial(root.go_page, 'home')
							else : self.alert_pop.comfirm=partial(root.go_page, 'template chooser');
							self.alert_pop.open()
					BoxLayout:
						padding: '10dp'
						DocLayout:
							id: doc_lay5
							template_func: 'template2'
							template_type: 'template5'
							orientation: 'vertical'
							padding: '20dp'
							spacing: '10dp'
							BoxLayout:
								spacing: '6dp'
								TextInput:
									auto_indent: True
									cursor_color: get_color_from_hex('#ff9900')
									font_size: '13dp'
									padding: '20dp', '20dp', '20dp', '20dp'
								TextInput:
									auto_indent: True
									cursor_color: get_color_from_hex('#ff9900')
									font_size: '13dp'
									padding: '20dp', '20dp', '20dp', '20dp'
								TextInput:
									auto_indent: True
									cursor_color: get_color_from_hex('#ff9900')
									font_size: '13dp'
									padding: '20dp', '20dp', '20dp', '20dp'

	Screen:
		name: 'saved_pdf'
		BoxLayout:
			orientation: 'vertical'
			canvas.before:
				Rectangle:
					size: self.size
					pos: self.pos
					source: atlas_path+'savedpdf'
			Image:
				size_hint_y: None
				height: '60dp'
				source: atlas_path+'check_cloud'
			Label:
				size_hint_y: None
				height: '30dp'
				color: get_color_from_hex('#ff9900')
				font_size: '16dp'
				text: 'Pdf Sucesfully made'
			Label:
				id: saved_file_name
				size_hint_y: None
				height: '30dp'
			Label:
				text: 'Upload file now'
				color: get_color_from_hex('#ff9900')
				font_size: '16dp'

			BoxLayout:
				size_hint_y: None
				pos_hint: {'x': 0}
				height: '60dp'
				padding: '10dp'
				spacing: '20dp'
				NormalButton:
					text: 'Later'
					on_release:
					on_release: root.current='home'
				NormalButton:
					text: 'Upload'
					on_release:

	SavedProjectPage:
		name: 'saved page'
		# on_pre_enter: root.reload_saved_project(self.saved_project_scroll)

<TemplateButton@BoxLayout>:
	orientation: 'vertical'
	source: ''
	text: ''
	padding: '20dp'
	release: 0
	IconButton:
		icon_source: root.source
		on_release: root.release += 0.001
	Label:
		italic: True
		size_hint_y: None
		height: '30dp'
		text: root.text
		color: .6,.6,.6,1

<DocLayout@BoxLayout>:
	canvas.before:
		Rectangle:
			size: self.size
			pos: self.pos
			source: atlas_path+'empty_page'

<AddButton>:
	size_hint_y: None
	height: '160dp'
	font_size: '20dp'
	background_down: atlas_path+'add'
	background_normal: atlas_path+'add'
	type: root.type


<PdfImage>:
	background_normal: ''
	background_down: ''
	background_color: 0,0,0,0
	allow_no_selection: False
	select_color: [get_color_from_hex('#aaaaaa'), get_color_from_hex('#FF996600')] if self.state == 'normal' else [get_color_from_hex('#FF9966'), get_color_from_hex('#FF996655')]
	drag_rectangle: self.x, self.y, self.width, self.height
	drag_timeout: 100000000
	drag_distance: 0
	size_hint_y: None
	height: '160dp'
	image_cls: image_cls
	type: 'pdf_image'
	template_func: ''
	data_list: []
	id_num: 0
	group: 'pdf image'

	canvas.after:
		Color:
			rgba: root.select_color[0]
		Line:
			rounded_rectangle: [self.x, self.y, self.width, self.height,10]
			width: 1.8 if self.state == 'down' else 1.2
		Color:
			rgba: root.select_color[1]
		RoundedRectangle:
			size: self.size
			pos: self.pos
	Label:
		font_size: '10dp'
		bold: True
		size_hint: None,None
		size: (16, 16)
		pos: root.x+10, root.y+root.height-20
		text: root.tag_num
		color: 1,1,1,1
		canvas.before:
			Color:
				rgba: get_color_from_hex('#FF9966')
			Ellipse:
				size: self.size
				pos: self.pos

	AsyncImage:
		id: image_cls
		size: (root.width, root.height-24)
		pos: root.pos
		source: root.source


<PageOptions>:
    size_hint: None, None
    size: '280dp', '180dp'
	choose_pic_btn: choose_pic_btn
	custom_button: custom_button
	take_picture: take_picture

    BoxLayout:
    	orientation: 'vertical'
    	padding: '6dp'
		canvas.before:
		    Color:
		        rgba: (1, 1, 1, 1)
		    RoundedRectangle:
		        pos: self.pos
		        size: self.size
        Label:
			text: 'Add Page'
            size_hint_y: None
            height: '40dp'
            padding: '20dp', '30dp'
            bold: True
            color: 0, 0, 0, 1
		LeftIconButton:
			id: take_picture
			icon_source: atlas_path+'camera'
			text: 'Take Picture'
		LeftIconButton:
			id: choose_pic_btn
			icon_source: atlas_path+'pic'
			text: 'Choose a picture'
		LeftIconButton:
			id: custom_button
			icon_source: atlas_path+'custom_page'
			text: 'Create custom page'


<FreeBtn@Button>:
	background_normal: ''
	color: 0,0,0,1

<EffectButton@ToggleButton>:
	width: '110dp'
	size_hint_x: None
	background_down: ''
	background_normal:''
	background_color: 0,0,0,0
	source: ''
	float_text: ''
	group: 'effect button'
	image_cls: imager
	allow_no_selection: False

	AsyncImage:
		id: imager
		size: root.width, root.height-10
		pos: root.x, root.y+10
		source: root.source
		canvas.after:
			Color:
				rgba: (0,0,0,0) if root.state == 'normal' else (.5,.5,.5,.2)
			RoundedRectangle:
				size: self.size
				pos: self.pos
	Label:
		size: root.width, 10
		pos: root.x, root.y+12
		text: root.float_text
		color: get_color_from_hex('#ff990088')


<EditModal>:
	size_hint: 1,None
	pos_hint: {'top':1}
	height: win.Window.height
	background: atlas_path+'invisible'
	background_color: 0,0,0,.7
	source_image: root.source_image
	source_image_cls: image_widget
	auto_dismiss: False
	effect_images: root.effect_images
	current_index: root.current_index
	on_open: original_image.state ='down'; self.children[self.current_index].state='normal';

	BoxLayout:
		orientation: 'vertical'
		AsyncImage:
			id: image_widget
			source:	root.source_image
		ScrollView:
			size_hint_y: None
			height: '150dp'
			bar_color: 0,0,0,0
			bar_inactive_color: 0,0,0,0
			canvas.before:
				Rectangle:
					source: atlas_path+'edit_panel'
					size: self.size
					pos: self.pos

			GridLayout:
				id: edit_grid
				size_hint_x: None
				rows: 1
				padding: '10dp'
				spacing: '10dp'

				EffectButton:
					id: original_image
					source: root.effect_images[0]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 0); root.current_index = 0;
					float_text: 'Original'
					state: 'down'
				EffectButton:
					source: root.effect_images[1]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 1); root.current_index = 1;
#					float_text: 'Effect 1'
				EffectButton:
					source: root.effect_images[2]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 2); root.current_index = 2;
#					float_text: 'Effect 2'
				EffectButton:
					source: root.effect_images[3]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 3); root.current_index = 3;
#					float_text: 'Effect 3'
				EffectButton:
					source: root.effect_images[4]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 4); root.current_index = 4;
#					float_text: 'Effect 4'
				EffectButton:
					source: root.effect_images[5]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 5); root.current_index = 5;
#					float_text: 'Effect 5'
				EffectButton:
					source: root.effect_images[6]
					group: 'effects'
					on_state: root.apply_temp_effect(self.state, 6); root.current_index = 6;
#					float_text: 'Effect 6'

		BoxLayout:
			size_hint_y: None
			height: '60dp'
			padding: '10dp'
			spacing: '20dp'
			NormalButton:
				text: 'Cancel'
				on_release: root.dismiss()
			NormalButton:
				text: 'Apply'
				on_release: root.apply_effect()

<ImageViewer>:
	image_cls: image_cls
	background: atlas_path+'invisible'
	AsyncImage:
		id: image_cls
		source: root.source

<SaveModal>:
    size_hint: None, None
    size: '315dp', '260dp'
    auto_dismiss: False
	#activate: root.activate
	ScreenManager:
		Screen:
			BoxLayout:
				canvas.before:
					Color:
						rgba: (1, 1, 1, 1)
					RoundedRectangle:
						pos: self.pos
						size: self.size

				orientation: 'vertical'
				padding: '6dp'
				Label:
					text: 'Save File'
					size_hint_y: None
					height: '30dp'
					bold: True
					canvas.after:
						Color:
							rgba: .5,.5,.5,.8
						Line:
							points: [self.x+6, self.y, self.x+self.width-6, self.y]
							width: 1.4
				Label:
					text_size: self.size
					valign: 'middle'
					halign: 'left'
					padding: '20dp', 0
					text: 'Name of file'
				TextInput:
					id: file_name
					text: ''
					size_hint_y: None
					height: '40dp'
					multiline: False
				Label:
					text_size: self.size
					valign: 'middle'
					halign: 'left'
					padding: '20dp', 0
					text: 'Name of Material'
				TextInput:
					id: material_name
					size_hint_y: None
					height: '40dp'
					multiline: False
				Label:
					text: 'Author name'
					text_size: self.size
					valign: 'middle'
					halign: 'left'
					padding: '20dp', 0
				TextInput:
					id: author
					text: root.saved_author_name
					size_hint_y: None
					height: '40dp'
					multiline: False
				BoxLayout:
					size_hint_y: None
					height: '40dp'
					NormalButton:
						shape: 'rounded_rectangle'
						on_release: root.dismiss()
						text: 'Cancel'
					NormalButton:
						shape: 'rounded_rectangle'
						text: 'Save'
						on_release: root.activate(root, file_name.text, author.text, material_name.text)


<ActionBar1@BoxLayout>:
    size_hint_y: None
    height: '50dp'
    text: ''
    back_action: True
    front_action: True
    front_text: 'Done'
	alert_pop: Factory.TemplateAlert()
	on_back_action:  Clock.schedule_once(lambda dt: self.alert_pop.dismiss(), 3) #self.alert_pop.open();
    IconButton:
        size_hint_x: None
        width: '64dp'
        background_color: 1,1,1,1
        icon_source: atlas_path+'arrow_back'
        on_release: root.back_action = not root.back_action

    Label:
        text: root.text
        color: get_color_from_hex('#FF9900')
        font_size: '18dp'
        bold: True
        text_size: self.size
        valign: 'middle'
        halign: 'left'
        padding: '20dp', 0
    Button:
        text: root.front_text
        bold: True
        size_hint_x: None
        width: '100dp'
        color: get_color_from_hex('#FF9900')
        background_normal: ''
        background_down: ''
        background_color: (1,1,1,0) if self.state == 'normal' else (0,0,0,.2)
		on_release: root.front_action = not root.front_action

<RotateModal>:
	size_hint: 1,1
	background: atlas_path+'invisible'
	background_color: 0,0,0,.7
	source_image_cls: source_image_cls
	source_image: root.source_image
	BoxLayout:
		orientation: 'vertical'
		AsyncImage:
			id: source_image_cls
			source: root.source_image
		IconButton:
			size_hint_y: None
			height: '50dp'
			icon_source: atlas_path+'rotate'
			on_release: root.apply_rotate(root.source_image, 'temp')
		BoxLayout:
			size_hint_y: None
			height: '60dp'
			padding: '10dp'
			spacing: '20dp'
			NormalButton:
				text: 'Cancel'
				on_release: root.dismiss()
			NormalButton:
				text: 'Apply'
				on_release:  root.apply_rotate(root.source_image, 'real'); root.dismiss()

<CropModal>:
	size_hint: 1,1
	background: atlas_path+'invisible'
	background_color: 0,0,0,.7
	source_image_cls: root.source_image_cls
	source_image: root.source_image


# just make an instance of the alert popup
<TemplateAlert@AlertPopup>:
	title: 'Alert'
	message: 'Are you sure you want to exit, you will loose you current working template'
	front_text: 'Yes'

<DropOptions@DropDown>:
	load_project: ObjectProperty()
	save_project: ObjectProperty()
	export_pdf: ObjectProperty()
	auto_width: False
	width: '150dp'
	canvas.after:
		Color:
			rgba: .8,.8,.8,1
		Line:
			rounded_rectangle: [self.x, self.y, self.width, self.height,4]
	NormalButton:
		text: 'Export to pdf'
		size_hint_y: None
		height: '46dp'
		on_release: root.export_pdf.open(); root.select('data')
	NormalButton:
		text: 'Save project'
		size_hint_y: None
		height: '46dp'
		on_release: root.save_project(); root.select('data')
	NormalButton:
		text: 'Load project'
		size_hint_y: None
		height: '46dp'
		on_release: root.load_project.current='saved page'; root.select('data')


<SaveProject@ModalView>:
    size_hint: None, None
    size: '310dp', '200dp'
    auto_dismiss: False

    BoxLayout:
		canvas.before:
		    Color:
		        rgba: (1, 1, 1, 1)
		    RoundedRectangle:
		        pos: self.pos
		        size: self.size

    	orientation: 'vertical'
    	padding: '6dp'
		Label:
			text: 'Save Project'
			size_hint_y: None
			height: '30dp'
			canvas.after:
				Color:
					rgba: .5,.5,.5,.8
				Line:
					points: [self.x+6, self.y, self.x+self.width-6, self.y]
					width: 1.4
    	Label:
			text_size: self.size
			valign: 'middle'
			halign: 'left'
			padding: '20dp', 0
    		text: 'Name of project'
    		size_hint_y: None
    		height: '40dp'
    	TextInput:
    		id: project_name
    		text: ''
    		size_hint_y: None
    		height: '40dp'
			multiline: False

    	BoxLayout:
			size_hint_y: None
			height: '40dp'
			NormalButton:
				shape: 'rounded_rectangle'
				on_release: root.dismiss()
				text: 'Cancel'
			NormalButton:
				shape: 'rounded_rectangle'
				text: 'Save'
				on_release: root.activate(project_name.text); root.dismiss()


<SavedProjectPage@Screen>:
	saved_project_scroll: saved_project_scroll
	BoxLayout:
		orientation: 'vertical'
		canvas.before:
			Color:
				rgba: 1,1,1,1
			Rectangle:
				size: self.size
				pos: self.pos
		BoxLayout:
			size_hint_y: None
			height: '50dp'
			eff: Effects(self).add_shadow()
			canvas.before:
				Color:
					rgba: .8,.8,.87,1
				Rectangle:
					size: self.size
					pos: self.pos
			IconButton:
				shape: 'rectangle'
				normal_color: .8,.8,.87,1
		        icon_source: atlas_path+'arrow_back'
				size_hint_x: None
				width: '50dp'
				on_release: root.parent.current = 'home'

			Label:
				color: get_color_from_hex('#FF9966')
				text: 'Load Projects'
				text_size: self.size
				padding: '30dp', 0
				halign: 'left'
				valign: 'center'
				font_size: '22dp'
				bold: True
				font_name: 'comic'
		ScrollView:
			GridLayout:
				size_hint_y: None
				height: self.minimum_height
				cols: 1
				id:saved_project_scroll


<SavedProjectButton>:
	project_name: 'Project Name'
	project_source: 'ic_action_calculator2.png'
	created_time: '2/3/2017'
	height: '60dp'
    canvas.after:
        Color:
            rgba: .8, .8, .8, .6
        Line:
            points: [self.x+10, self.y, self.width-10, self.y]
            width: 1.5
	BoxLayout:
		Image:
			source: root.project_source
			size_hint_x: None
			width: '60dp'
		BoxLayout:
			orientation: 'vertical'
			Label:
				text: root.project_name
				shorten_from: 'right'
				shorten: True
				text_size: self.size
				valign: 'center'
				halign: 'left'
				padding: '20dp','10dp'
				color: 0,0,0,1
				font_name: 'comic'
			Label:
				text: root.created_time
				text_size: self.size
				valign: 'center'
				halign: 'left'
				padding: '20dp',0
				color: .4,.4,.4,1

	BoxLayout:
		size_hint_y: None
		height: '40dp'
		FloatLayout:
			BorderButton:
				pos_hint: {'center_y':.5,'center_x':.7}
				size_hint: (None,None)
				size: '80dp','30dp'
				text: 'Delete'
				on_release: root.delete()
		FloatLayout:
			BorderButton:
				size_hint: (None,None)
				size: '80dp','30dp'
				pos_hint: {'center_y':.5,'center_x':.3}
				text: 'Load'
				on_release: root.load()

<BorderButton@NormalButton>:
	canvas.after:
		Color:
			rgba: .5,.5,.5,1
		Line:
			rounded_rectangle: [self.x, self.y, self.width, self.height,10]
