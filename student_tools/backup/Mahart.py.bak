# my kivy side import
import kivy 
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.spinner import Spinner, SpinnerOption
from kivy.uix.dropdown import DropDown
from kivy.clock import Clock
from kivy.animation import Animation
from kivy.core.window import Window
from kivy.garden.androidtabs import AndroidTabsBase
from kivy.lang import Builder
from kivy.uix.modalview import ModalView
from kivy.garden.navigationdrawer import NavigationDrawer
from kivy.properties import StringProperty, ListProperty

#python side import
import time
from functools import partial


# defualt password
global password
password = '0000'
# saving values for another page
#Gp_values1 = []
Gp_values2 = []
#Gp_values_list = []
Gp_list = []
sum_of_unit_list = []

calc_edit_list = []
password_on = True


class comfirm_pop(ModalView):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    
    def delete_all(self):
        Gp_values_list.clear()
        screens.current = 'result_view_page'
        #if that doesnt work do this
        #Result_list().delete_all()
        #self.dismiss()


class MyTab(BoxLayout, AndroidTabsBase):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # self.ids.grid.bind(minimum_height =self.ids.grid.setter('height'))
        #
        # for i in range(15):
        #     self.ids.grid.add_widget(Button(text= 'ddd', size_hint_y=None, height='50dp'))


class GP_Calculator(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.result_btn = self.ids.result_btn
        self.password_pop = PasswordPop()    #password popup modalview

        if password_on == False:
            self.result_btn.bind(on_release=self.pass_on)

    def on_leave(self):
        pass


class Calculate_Gp(Screen):
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.grid_guy = self.ids.grid_guy
        self.calc_option = self.ids.calc_option

        self.course_num = 6

        #my drop down custom
        self.options = DropDown(auto_width=False, width='150dp')
        self.resest_btn = Button(text='Reset', size_hint=(1, None),
                                 height='50dp', background_normal='', background_color=(1, 1, 1, 1), color=(0, 0, 0, 1))

        self.resest_btn.bind(on_release = lambda btn: self.reset_values())

        self.delete_btn = Button(text='Delete', size_hint=(1, None),
                                 height='50dp', background_normal='', background_color=(1, 1, 1, 1), color=(0, 0, 0, 1))

        self.delete_btn.bind(on_release= lambda btn: self.delete_course())
        #add course to dropdown
        self.options.add_widget(self.resest_btn)
        self.options.add_widget(self.delete_btn)
#        dropdown.bind(on_select=lambda instance, x: setattr(, 'text', str(instance)))
        
        
        self.calc_option.bind(on_release=self.options.open)

        
        #try to set height
        self.grid_guy.bind(minimum_height=self.grid_guy.setter('height'))
        
                
        if screens == 'result_view_page':
            print('bjbj')
##            self.course_list = calc_edit_list[0]
##            self.unit_list = calc_edit_list[1]
##            self.grade_list = calc_edit_list[2]
##
##            for i in range((len(calc_edit_list))-1):
#                self.course_label.text = self.course_list[i]
##                self.unit_spin.text = self.unit_list[i]
##                self.grade_spin.text = self.grade_list[i] 
##                #then add to the gridlayout
##                self.grid_guy.add_widget(Label(text=self.course_list[i], size_hint_y=None, height='50dp'))
##                
##                self.grid_guy.add_widget(Spinner(text=self.unit_list[i], values=('1', '2', '3', '4', '5'), size_hint=(.6, None),
##                                                 pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp'))
##
##                self.grid_guy.add_widget(Spinner(text=self.grade_list[i], values=('A', 'B', 'C', 'D', 'E', 'F'), size_hint=(.6, None),
##                                                 pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp'))

        else:
            for i in range(5): #add 5 courses to the gridlayout
                self.course_text = 'Course {}'
                self.grid_guy.add_widget(Label(text=self.course_text.format(i+1), size_hint_y=None, height='50dp',
                                         color=(.1, .1, .1, 1)))
                
                self.grid_guy.add_widget(Spinner(text='2', values=('1', '2', '3', '4', '5'), size_hint=(.6, .6), sync_height=True, 
                                                 pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp', background_normal='Data/Image/Asset 3.png'))

                self.grid_guy.add_widget(Spinner(text='B', values=('A', 'B', 'C', 'D', 'E', 'F'), size_hint=(.6, .6),
                                                 pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp', background_normal='Data/Image/Asset 3.png'))

    def delete_course(self): # remove 3 widget from the grid
        self.grid_list = self.grid_guy.children

        for j in range(3):
            if len(self.grid_list) <= 3:
                self.course_num = 2
                pass
            else:
                self.grid_guy.remove_widget(self.grid_list[0])   
        if len(self.grid_list) != 3:
            self.course_num -= 1


    def reset_values(self):
        self.__init__()

    def add_btn(self):  #add a new button to the gridlayout
        self.course_text = 'Course {}'
        self.grid_guy.add_widget(Label(text=self.course_text.format(self.course_num), size_hint_y=None, height=40, color=(.1, .1,.1, 1)))

        self.grid_guy.add_widget(Spinner(text='2', values=('1', '2', '3', '4', '5'), size_hint=(.6, .6), sync_height=True, 
                                         pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp', background_normal='Data/Image/Asset 3.png'))

        self.grid_guy.add_widget(Spinner(text='B', values=('A', 'B', 'C', 'D', 'E', 'F'), size_hint=(.6, .6),
                                         pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp', background_normal='Data/Image/Asset 3.png'))
        
        self.course_num += 1


    def open_drop(self):
        self.options.open(self.calc_option)
        
    def calculate_gp(self, grades, units):
        self.grade_values = []
        self.cal_grade = []
        self.sum_of_unit = 0
        self.sum_of_grade = 0

        for i in grades:
            
            if i == 'E':
                self.grade_values.append('1')
            if i == 'D':
                self.grade_values.append('2')
            if i == 'C':
                self.grade_values.append('3')
            if i == 'B':
                self.grade_values.append('4')
            if i == 'A':
                self.grade_values.append('5')
            if i == 'F':
                self.grade_values.append('0') 
        
        for i in range(len(self.grade_values)):
            self.multi = int(units[i]) * int(self.grade_values[i])
            self.cal_grade.append(self.multi)
            print(units[i], grades[i])
            
        for i in units:
            self.sum_of_unit += int(i)

        for i in self.cal_grade:
            self.sum_of_grade += i            

        self.gp = self.sum_of_grade/self.sum_of_unit
        self.gp = str(self.gp)
        x = [self.gp, self.sum_of_unit]
        return x

    def get_values(self):
        self.list_value = self.grid_guy.children
        self.course_list = []
        self.grade_list = []
        self.unit_list = []

        global courses
        
        j = 2 # get the course list
        for i in range((len(self.list_value)//3)):
            self.course = self.list_value[j]
            self.course = self.course.text
            self.course_list.append(self.course)
            j += 3
        courses = len(self.course_list)
        
        j = 1 #get the unit list
        for i in range((len(self.list_value)//3)):
            self.unit = self.list_value[j]
            self.unit = self.unit.text
            self.unit_list.append(self.unit)
            j += 3

        j = 0# get the grade list
        for grade in range((len(self.list_value)//3)):
            self.grade = self.list_value[j].text
            self.grade_list.append(self.grade)
            j += 3

        #then we send values to the calculator func
        self.list1 = self.calculate_gp(self.grade_list, self.unit_list)
        global Gp
        global sum_of_unit
        Gp = self.list1[0]
        print(Gp)
        
        sum_of_unit = str(self.list1[1])

        #change the page to result view
        if screens.previous() == 'result_view_page':
            #delete item from the list so that result list view doesnt use it
            for i in range((len(Gp_values_list))-1): 
                if Gp_values_list[i] == calc_edit_list:
                    Gp_values_list.pop(i)

        Gp_list.append(Gp)
        sum_of_unit_list.append(sum_of_unit) 
        #on calculate we store in the gp_value list        
        global Gp_values1
        Gp_values1 = [self.course_list, self.unit_list, self.grade_list]
        screens.current = 'result_view_page'


class Result_view(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        self.gp_view = self.ids.gp_view
        self.total_unit = self.ids.total_unit
        self.grid_lay = self.ids.grid_lay
        self.result_list_option = self.ids.result_list_option
        
        #making our drop options    
##        self.result_options = custom_drop(size_hint= (.3, .4))
##        self.edit_btn = Button(text='Edit')
##        self.edit_btn.bind(on_release=self.edit_page)
##        
##        self.result_list_option.bind(on_release=self.result_options.open)



        self.grid_lay.bind(minimum_height=self.grid_lay.setter('height'))   #required

            
    def edit_page(self):
        calc_edit_list = Gp_values1
        screens.current = 'calc_page'

    #define what happens when we leave this screen

    def on_pre_enter(self):
        self.grid_lay.clear_widgets()
        if screens.previous() == 'calc_page':
            self.course_list = Gp_values1[0]
            self.unit_list = Gp_values1[1]
            self.grade_list = Gp_values1[2]

        elif screens.previous() == 'result_list_page':
            self.course_list = Gp_values2[0]
            self.unit_list = Gp_values2[1]
            self.grade_list = Gp_values2[2]

        for i in range((len(self.course_list))):
            self.course_label = Label(text='ssg4', color=(.1, .1,.1, 1), size_hint_y=None, height=40)
      
            self.unit_spin = Spinner(text='2', values=('1', '2', '3', '4', '5'), size_hint=(.6, .6), sync_height=True, 
                                         pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp', background_normal='Data/Image/Asset 3.png')

            self.grade_spin = Spinner(text='B', values=('A', 'B', 'C', 'D', 'E', 'F'), size_hint=(.6, .6),
                                         pos_hint={'center_x': .5, 'center_y': .5}, size_hint_y=None, height='50dp', background_normal='Data/Image/Asset 3.png')
        
            self.course_label.text = self.course_list[i]
            self.unit_spin.text = self.unit_list[i]
            self.grade_spin.text = self.grade_list[i] 

            #then add to the gridlayout
            self.grid_lay.add_widget(self.course_label)
            self.grid_lay.add_widget(self.unit_spin)
            self.grid_lay.add_widget(self.grade_spin)

            self.gp_view.text = 'Grade Point: {}'.format(Gp)
            self.total_unit.text = 'Sum of Unit: {}'.format(sum_of_unit)
            self.ids.num_of_course.text = 'Total Number Of Courses: {}'.format(courses) 


    def on_pre_leave(self):
##        if screens.previous() == 'calc_page':
##            Gp_values_list.append(Gp_values1)
##            Gp_values1.clear()
##        else:
##            Gp_values2.clear()
        global Gp_values_list
        Gp_values_list = []
        
        Gp_values_list.append(Gp_values1)
        print(Gp_values_list)
        Gp_values1.clear()
        
        
class Result_list(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.result_scroll = self.ids.result_scroll
        self.result_scroll.bind(minimum_height=self.result_scroll.setter('height'))
        

       #dropdown
##        self.comfirm = comfirm_pop()
##        self.result_options = custom_drop(size_hint= (.3, .4))
##        self.refresh_btn = Button(text='Refresh list')
##        self.refresh_btn.bind(on_release=self.refresh_list)        
##        
##        self.delete_btn = Button(text='Delete All')
##        self.delete_btn.bind(on_release=self.comfirm_pop.open)
##
##        self.result_list_option.bind(on_release=self.result_options.open)

    def on_enter(self):
        self.set_values()

    def set_values(self):
        for child in self.result_scroll.children:
            self.result_scroll.remove_widget(child)
            
        try:
            if False:
                self.error_msg = Label(text='Sorry no Result were found', color=(.3,.3, .3, 1) )
                self.result_scroll.add_widget(self.error_msg)


            else:
#                self.list_len = (len(Gp_values_list)) - 1
#                for j in range((len(Gp_values_list))):
                for i in range(20):
                    self.result = Result_Button()
                    self.result.gp_display.text = '{}'.format(time.ctime())#'Gp: ' + Gp_list[self.list_len]
                    self.result.sum_display.text =  'Gp: 4.4'#'Sum of unit: ' + str(sum_of_unit)
                    self.result_scroll.add_widget(self.result)
                    #self.list_len -= 1
                        
        except Exception as e:
            print(e)
            self.error_msg = Label(text='Sorry no Result were found', color=(.3,.3, .3, 1) )
            self.result_scroll.add_widget(self.error_msg)

                

    def delete_all(self):
        Gp_values_list.clear()
        self.set_values()

    def refresh_list(self):
        self.set_values()

    def on_result_press(self, pos):
        Gp_values2 = Gp_values_list[pos]
        screens.current = 'result_view_page'


class PasswordPop(ModalView):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)  
        self.password_state = self.ids.password_state
        self.pass_btn = self.ids.pass_btn
        self.password_value = self.ids.password_value

        if password == '0000':  # set the text if the user hasnt change the default password
            self.password_value.text = '0000'

    def comfirm_pass(self):
        if self.password_value.text == password:
            self.dismiss()
            screens.current = 'result_list_page'
        
        else:
            self.password_value.text = ''
            self.password_state.color = (1, .2, .2, 1)
            self.password_state.text = 'Incorrect Password'



class Settings_password(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.warning = self.ids.warning
        self.old_password = self.ids.old_password
        self.new_password = self.ids.new_password
        self.comfirm_pass = self.ids.comfirm_password
        self.password_switch = self.ids.password_switch
        self.password1 = '0000'

        if self.password1 == '0000': # set the text if the user hasnt change the default password
            self.old_password.text = '0000'
            

    def set_warning(self): #this func is being called on_text
        if self.new_password.text != self.comfirm_pass.text:
            if len(self.comfirm_pass.text) >= len(self.new_password.text):
                self.warning.text = "Password Does Not Macth"
        else:
            self.warning.text =  ''

    def  set_password(self):
        if self.old_password.text == self.password1:
            self.password1 = self.new_password.text
            self.old_password.text = self.new_password.text
        else:
            pass
        print( self.password1 )

    def on_leave(self):
        #turm password on/off
        if self.password_switch.state == 'normal':
            password_on  = True
        else:
            password_on = False

    def print_me(self):
        print(self.password_switch.state)
       
            

class Settings(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def go_back(self): #go back to previous page cause you might have being coming from any page
        previous = screens.previous()
        screens.current = previous


class Home_page(Screen):
    def __init__(self, **kwargs):
        super(Home_page, self).__init__(**kwargs)


class Lecture_time_table(Screen):
    pass


class Exam_time_table(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)        


class Box_guy(BoxLayout):
    pass

class Matrix_detector(Screen):  #detector side of app

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        file = open('Data/unilag_courses.txt', 'r')

        self.courses = {}
        file_lines = file.readlines()
        temp = []
        temp_fal = ''
        first = True
        # print(file_lines)

        for line in file_lines:
            line = line.strip('\n')
            if line == '':
                pass
            else:
                if line[0] == '*':
                    if first:
                        temp_fal = line
                    else:
                        temp.sort()
                        self.courses[temp_fal[1:]] = temp
                        temp = []
                        temp_fal = line
                    # print('-----------------------')
                    # print('FACULTY OF ', line[1:])
                    # print('-----------------------')
                    first = False
                else:
                    first = False
                    temp.append(line)
                    # print(line)

    def go_back(self): #go back to previous page cause you might have being coming from any page
        previous = screens.previous()
        screens.current = previous

    def get_year(self, matrix):
    
        self.year = matrix[0:2]
        self.current_year = time.ctime()

        self.year = int('20' + self.year)
        self.current_year = int(self.current_year[20:24])
    
        self.year_dif = self.current_year - self.year
    
        self.level = str(self.year_dif) + '00'
    
        self.year_of_entry = (str(self.year) + '/' + str(self.year + 1))
         
        return [self.level, self.year_of_entry]
    


    def get_falculty(self, matrix):
        
        self.list_falculty = list(self.courses)
        self.list_falculty.sort()
        print(self.list_falculty)

        if matrix[2] == '0':
            self.falc_no = int(matrix[3])-1
            self.falculty = self.list_falculty[self.falc_no]
        else:
            self.falc_no = int(matrix[2:4])-1
            self.falculty = self.list_falculty[self.falc_no]

        self.return_val = self.falculty

        return self.return_val


    def get_department(self, matrix):

        self.falculty = self.get_falculty(matrix)
        # self.falc_no = self.falculty[1]
        print(self.falculty)
        
        if matrix[4] == '0':
            self.dept_no = int(matrix[5])-1
            print(self.dept_no)
            print(self.courses[self.falculty])
            self.department = self.courses[self.falculty][self.dept_no]
        else:
            self.dept_no =  int(matrix[4:6])
            self.department = self.courses[self.falculty][self.dept_no]


        return self.department


    def get_position(self, matrix):

        if matrix[7] == '0' and matrix[6] == '0':
            self.position = matrix[8]
        elif matrix[6] == '0':
            self.position = matrix[7:9]
        else:
            self.position = matrix[6:9]

        return self.position
    
    def set_info(self, matrix):
        self.box_guy = Box_guy()
        self.year_display = self.ids.year_display
        self.level_display = self.ids.level_display
        self.department_display = self.ids.department_display
        self.falculty_display = self.ids.falculty_display
        self.position_display = self.ids.position_display


        self.matrix = int(matrix)
        self.year_level = self.get_year(matrix)
        self.year = str(self.year_level[1])
        self.level = str(self.year_level[0])
        
        self.department = str(self.get_department(matrix))
        self.falculty = str(self.get_falculty(matrix))
        self.position = str(self.get_position(matrix))

        self.year_display.text = self.year
        self.level_display.text = self.level
        self.department_display.text = self.department
        self.falculty_display.text = self.falculty
        self.position_display.text = self.position

class Result_Button(Button):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.gp_display = self.ids.gp_display
        self.sum_display = self.ids.sum_display

    def on_press(self):
        pass

# my screen management
class Manager_(ScreenManager):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        global screens
        screens = self

        self.add_widget(Home_page(name='home_page'))
        self.add_widget(GP_Calculator(name='gp_page'))
        self.add_widget(Matrix_detector(name='detector_page'))
        self.add_widget(Exam_time_table(name='exam_page'))
        self.add_widget(Lecture_time_table( name='lecture_page'))
        self.add_widget(Calculate_Gp(name='calc_page'))
        self.add_widget(Result_view(name='result_view_page'))
        self.add_widget(Result_list(name='result_list_page'))
        self.add_widget(Settings(name='settings page'))
        self.add_widget(Settings_password(name='set_password_page'))


class MahartApp(App):
    def build(self):
        return Builder.load_file('Mahart_kv.kv')

if __name__ == '__main__':
    MahartApp().run()
